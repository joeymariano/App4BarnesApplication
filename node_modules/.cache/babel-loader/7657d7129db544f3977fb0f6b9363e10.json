{"ast":null,"code":"import _defineProperty from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/joey/code/app4barnes/src/components/CustomerForm.js\";\n// Name (cannot be empty) X\n// Phone Number (at least 7 digits, only numbers)\n// Email Address (cannot be empty and must be in format abc@xyz.someTld)\n// Zip Code (at least 5 digits, only numbers)\nimport React, { Component } from 'react';\n\nvar CustomerForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomerForm, _Component);\n\n  function CustomerForm(props) {\n    var _this;\n\n    _classCallCheck(this, CustomerForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomerForm).call(this, props));\n\n    _this.updateState = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.formValidator = function (e) {\n      e.preventDefault();\n      var _this$state = _this.state,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          phone = _this$state.phone,\n          email = _this$state.email,\n          zipcode = _this$state.zipcode;\n      var formErrors = {};\n      var formIsValid = true; //frist name     \n\n      if (!firstName) {\n        formIsValid = false;\n        formErrors['firstNameErr'] = 'First Name is required.';\n      } //last name     \n\n\n      if (!lastName) {\n        formIsValid = false;\n        formErrors['lastNameErr'] = 'Last Name is required.';\n      } //email    \n\n\n      if (!email) {\n        formIsValid = false;\n        formErrors['emailErr'] = 'Email is required.';\n      } else if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n        formIsValid = false;\n        formErrors['emailErr'] = 'Invalid email.';\n      } //phone number    \n\n\n      if (!phone) {\n        formIsValid = false;\n        formErrors['phoneErr'] = 'Phone number is required.';\n      } else {\n        var phoneRegex = /^(?:(?:\\\\+|0{0,2})91(\\s*[\\\\-]\\s*)?|[0]?)?[789]\\d{9}$/;\n\n        if (!phoneRegex.test(phone)) {\n          formIsValid = false;\n          formErrors['phoneNumberErr'] = 'Invalid phone number.';\n        }\n      } //zipcode    \n\n\n      if (!zipcode) {\n        formIsValid = false;\n        formErrors['zipcodeErr'] = 'Phone number is required.';\n      } else {\n        var zipcodeRegex = /(^(?!0{5})(\\d{5})(?!-?0{4})(-?\\d{4})?$)/;\n\n        if (!zipcodeRegex.test(zipcode)) {\n          formIsValid = false;\n          formErrors['zipcodeErr'] = 'Invalid zipcode.';\n        }\n      }\n\n      _this.setState({\n        formErrors: formErrors\n      });\n\n      return formIsValid;\n    };\n\n    _this.state = {\n      firstName: '',\n      lastName: '',\n      phone: '',\n      email: '',\n      zipcode: '',\n      formErrors: {}\n    };\n    return _this;\n  }\n\n  _createClass(CustomerForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(\"input\", {\n        id: \"firstName\",\n        name: \"firstName\",\n        type: \"text\",\n        value: this.state.firstName,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        id: \"firstNameErrors\",\n        class: \"errors\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.state.formErrors['firstName']), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Last Name\"), React.createElement(\"input\", {\n        id: \"lastName\",\n        name: \"lastName\",\n        type: \"text\",\n        value: this.state.lastName,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        id: \"firstNameErrors\",\n        class: \"errors\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.state.formErrors['lastName']), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Phone\"), React.createElement(\"input\", {\n        id: \"phone\",\n        name: \"phone\",\n        type: \"text\",\n        value: this.state.phone,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        id: \"firstNameErrors\",\n        class: \"errors\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.state.formErrors['phone']), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Email\"), React.createElement(\"input\", {\n        id: \"email\",\n        name: \"email\",\n        type: \"text\",\n        value: this.state.email,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        id: \"firstNameErrors\",\n        class: \"errors\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.state.formErrors['email']), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"zipcode\"), React.createElement(\"input\", {\n        id: \"zipcode\",\n        name: \"zipcode\",\n        type: \"text\",\n        value: this.state.zipcode,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        id: \"firstNameErrors\",\n        class: \"errors\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.state.formErrors['zipcode']), React.createElement(\"input\", {\n        id: \"submit\",\n        type: \"submit\",\n        value: \"Continue\",\n        onsubmit: this.formValidator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CustomerForm;\n}(Component);\n\nexport default CustomerForm;","map":{"version":3,"sources":["/home/joey/code/app4barnes/src/components/CustomerForm.js"],"names":["React","Component","CustomerForm","props","updateState","event","setState","target","name","value","formValidator","e","preventDefault","state","firstName","lastName","phone","email","zipcode","formErrors","formIsValid","test","phoneRegex","zipcodeRegex"],"mappings":"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","sourcesContent":["// Name (cannot be empty) X\n// Phone Number (at least 7 digits, only numbers)\n// Email Address (cannot be empty and must be in format abc@xyz.someTld)\n// Zip Code (at least 5 digits, only numbers)\n\nimport React, { Component } from 'react';\n\nclass CustomerForm extends Component {\n\tconstructor(props) {\n\tsuper(props);\n\t\tthis.state = {\n\t\t  firstName: '',\n\t\t  lastName: '',\n\t\t  phone: '',\n\t\t  email: '',\n\t\t  zipcode: '',\n\t\t  formErrors: {}\n\t \t}\t\n\t}\n\n\tupdateState = (event) => {\n\t this.setState({\n\t   [event.target.name]: event.target.value\n\t })\n\t}\n\n\n\tformValidator = (e) => {\n\t  e.preventDefault();\n\n\t\tconst { firstName, lastName, phone, email, zipcode } = this.state\n\t\tlet formErrors = {}\n\t\tlet formIsValid = true  \n\n\t\t//frist name     \n\t\tif (!firstName) {    \n\t\t   formIsValid = false  \n\t\t   formErrors['firstNameErr'] = 'First Name is required.'\n\t\t}    \n\n\t\t//last name     \n\t\tif (!lastName) {    \n\t\t   formIsValid = false\n\t\t   formErrors['lastNameErr'] = 'Last Name is required.'  \n\t\t}    \n\n\t //email    \n\t if (!email) {    \n\t     formIsValid = false;    \n\t     formErrors['emailErr'] = 'Email is required.'    \n\t }    \n\t else if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email))) {    \n\t     formIsValid = false\n\t     formErrors['emailErr'] = 'Invalid email.'  \n\t }    \n\n\t //phone number    \n\t if (!phone) {    \n\t     formIsValid = false   \n\t     formErrors['phoneErr'] = 'Phone number is required.' \n\t }    \n\t else {    \n\t     var phoneRegex = /^(?:(?:\\\\+|0{0,2})91(\\s*[\\\\-]\\s*)?|[0]?)?[789]\\d{9}$/\n\t     if (!phoneRegex.test(phone)) {    \n\t         formIsValid = false\n\t         formErrors['phoneNumberErr'] = 'Invalid phone number.'    \n\t     }    \n\t }\n\n\t //zipcode    \n\t if (!zipcode) {    \n\t     formIsValid = false;    \n\t     formErrors['zipcodeErr'] = 'Phone number is required.' \n\t }    \n\t else {    \n\t     var zipcodeRegex = /(^(?!0{5})(\\d{5})(?!-?0{4})(-?\\d{4})?$)/  \n\t     if (!zipcodeRegex.test(zipcode)) {    \n\t         formIsValid = false\n\t         formErrors['zipcodeErr'] = 'Invalid zipcode.'  \n\t     }    \n\t }\n\n\tthis.setState({ formErrors: formErrors })  \n\t return formIsValid \n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<form>\n\t\t\t\t<label>First Name</label>\n\t\t\t\t<input id='firstName' name='firstName' type='text' value={ this.state.firstName } onChange={ this.updateState }/>\n\t\t\t\t<label id='firstNameErrors' class='errors'>{ this.state.formErrors['firstName'] }</label>\n\n\t\t\t\t<label>Last Name</label>\n\t\t\t\t<input id='lastName' name='lastName' type='text' value={ this.state.lastName } onChange={ this.updateState }/>\n\t\t\t\t<label id='firstNameErrors' class='errors'>{ this.state.formErrors['lastName'] }</label>\n\n\t\t\t\t<label>Phone</label>\n\t\t\t\t<input id='phone' name='phone' type='text' value={ this.state.phone } onChange={ this.updateState }/>\n\t\t\t\t<label id='firstNameErrors' class='errors'>{ this.state.formErrors['phone'] }</label>\n\n\t\t\t\t<label>Email</label>\n\t\t\t\t<input id='email' name='email' type='text' value={ this.state.email } onChange={ this.updateState }/>\n\t\t\t\t<label id='firstNameErrors' class='errors'>{this.state.formErrors['email']}</label>\n\n\t\t\t\t<label>zipcode</label>\n\t\t\t\t<input id='zipcode' name='zipcode' type='text' value={ this.state.zipcode } onChange={ this.updateState }/>\n\t\t\t\t<label id='firstNameErrors' class='errors'>{this.state.formErrors['zipcode']}</label>\n\n\t\t\t\t<input id='submit' type='submit' value='Continue' onsubmit={ this.formValidator }/>\n\t\t\t</form>\n\t\t)\n\t}\n}\n\nexport default CustomerForm"]},"metadata":{},"sourceType":"module"}