{"ast":null,"code":"import _defineProperty from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/joey/code/app4barnes/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/joey/code/app4barnes/src/components/CustomerForm.js\";\n// Name (cannot be empty) X\n// Phone Number (at least 7 digits, only numbers)\n// Email Address (cannot be empty and must be in format abc@xyz.someTld)\n// Zip Code (at least 5 digits, only numbers)\nimport React, { Component } from 'react';\n\nvar CustomerForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomerForm, _Component);\n\n  function CustomerForm(props) {\n    var _this;\n\n    _classCallCheck(this, CustomerForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomerForm).call(this, props));\n\n    _this.updateState = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.formValidator = function () {\n      var _this$state = _this.state,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          phone = _this$state.phone,\n          email = _this$state.email,\n          zipcode = _this$state.zipcode;\n      var formErrors = {};\n      var formIsValid = true; //frist name     \n\n      if (!firstName) {\n        formIsValid = false;\n        formErrors['firstNameErr'] = 'First Name is required.';\n      } //last name     \n\n\n      if (!lastName) {\n        formIsValid = false;\n        formErrors['lastNameErr'] = 'Last Name is required.';\n      } //email    \n\n\n      if (!email) {\n        formIsValid = false;\n        formErrors['emailErr'] = 'Email is required.';\n      } else if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n        formIsValid = false;\n        formErrors['emailErr'] = 'Invalid email.';\n      } //phone number    \n\n\n      if (!phone) {\n        formIsValid = false;\n        formErrors['phoneErr'] = 'Phone number is required.';\n      } else {\n        var phoneRegex = /^(?:(?:\\\\+|0{0,2})91(\\s*[\\\\-]\\s*)?|[0]?)?[789]\\d{9}$/;\n\n        if (!phoneRegex.test(phone)) {\n          formIsValid = false;\n          formErrors['phoneNumberErr'] = 'Invalid phone number.';\n        }\n      } //zipcode    \n\n\n      if (!zipcode) {\n        formIsValid = false;\n        formErrors['zipcodeErr'] = 'Phone number is required.';\n      } else {\n        var zipcodeRegex = /(^(?!0{5})(\\d{5})(?!-?0{4})(-?\\d{4})?$)/;\n\n        if (!zipcodeRegex.test(zipcode)) {\n          formIsValid = false;\n          formErrors['zipcodeErr'] = 'Invalid zipcode.';\n        }\n      }\n\n      _this.setState({\n        formErrors: formErrors\n      });\n\n      return formIsValid;\n    };\n\n    _this.state = {\n      firstName: '',\n      lastName: '',\n      phone: '',\n      email: '',\n      zipCode: '',\n      formErrors: {}\n    };\n    return _this;\n  }\n\n  _createClass(CustomerForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(\"input\", {\n        id: \"firstName\",\n        name: \"firstName\",\n        type: \"text\",\n        value: this.state.firstName,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Last Name\"), React.createElement(\"input\", {\n        id: \"lastName\",\n        name: \"lastName\",\n        type: \"text\",\n        value: this.state.lastName,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Phone\"), React.createElement(\"input\", {\n        id: \"phone\",\n        name: \"phone\",\n        type: \"text\",\n        value: this.state.phone,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Email\"), React.createElement(\"input\", {\n        id: \"email\",\n        name: \"email\",\n        type: \"text\",\n        value: this.state.email,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"ZipCode\"), React.createElement(\"input\", {\n        id: \"zipCode\",\n        name: \"zipCode\",\n        type: \"text\",\n        value: this.state.zipCode,\n        onChange: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: \"submit\",\n        type: \"submit\",\n        value: \"Continue\",\n        onSubmit: this.formValidator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return CustomerForm;\n}(Component);\n\nexport default CustomerForm;","map":{"version":3,"sources":["/home/joey/code/app4barnes/src/components/CustomerForm.js"],"names":["React","Component","CustomerForm","props","updateState","event","setState","target","name","value","formValidator","state","firstName","lastName","phone","email","zipcode","formErrors","formIsValid","test","phoneRegex","zipcodeRegex","zipCode"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,Y;;;;;AACL,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACnB,sFAAMA,KAAN;;AADmB,UAYnBC,WAZmB,GAYL,UAACC,KAAD,EAAW;AACxB,YAAKC,QAAL,qBACGD,KAAK,CAACE,MAAN,CAAaC,IADhB,EACuBH,KAAK,CAACE,MAAN,CAAaE,KADpC;AAGA,KAhBkB;;AAAA,UAmBnBC,aAnBmB,GAmBH,YAAM;AAAA,wBACkC,MAAKC,KADvC;AAAA,UACbC,SADa,eACbA,SADa;AAAA,UACFC,QADE,eACFA,QADE;AAAA,UACQC,KADR,eACQA,KADR;AAAA,UACeC,KADf,eACeA,KADf;AAAA,UACsBC,OADtB,eACsBA,OADtB;AAErB,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIC,WAAW,GAAG,IAAlB,CAHqB,CAKrB;;AACA,UAAI,CAACN,SAAL,EAAgB;AACZM,QAAAA,WAAW,GAAG,KAAd;AACAD,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6B,yBAA7B;AACH,OAToB,CAWrB;;;AACA,UAAI,CAACJ,QAAL,EAAe;AACXK,QAAAA,WAAW,GAAG,KAAd;AACAD,QAAAA,UAAU,CAAC,aAAD,CAAV,GAA4B,wBAA5B;AACH,OAfoB,CAiBrB;;;AACA,UAAI,CAACF,KAAL,EAAY;AACRG,QAAAA,WAAW,GAAG,KAAd;AACAD,QAAAA,UAAU,CAAC,UAAD,CAAV,GAAyB,oBAAzB;AACH,OAHD,MAIK,IAAI,CAAE,gDAAgDE,IAAhD,CAAqDJ,KAArD,CAAN,EAAoE;AACrEG,QAAAA,WAAW,GAAG,KAAd;AACAD,QAAAA,UAAU,CAAC,UAAD,CAAV,GAAyB,gBAAzB;AACH,OAzBoB,CA2BrB;;;AACA,UAAI,CAACH,KAAL,EAAY;AACRI,QAAAA,WAAW,GAAG,KAAd;AACAD,QAAAA,UAAU,CAAC,UAAD,CAAV,GAAyB,2BAAzB;AACH,OAHD,MAIK;AACD,YAAIG,UAAU,GAAG,sDAAjB;;AACA,YAAI,CAACA,UAAU,CAACD,IAAX,CAAgBL,KAAhB,CAAL,EAA6B;AACzBI,UAAAA,WAAW,GAAG,KAAd;AACAD,UAAAA,UAAU,CAAC,gBAAD,CAAV,GAA+B,uBAA/B;AACH;AACJ,OAtCoB,CAwCrB;;;AACA,UAAI,CAACD,OAAL,EAAc;AACVE,QAAAA,WAAW,GAAG,KAAd;AACAD,QAAAA,UAAU,CAAC,YAAD,CAAV,GAA2B,2BAA3B;AACH,OAHD,MAIK;AACD,YAAII,YAAY,GAAG,yCAAnB;;AACA,YAAI,CAACA,YAAY,CAACF,IAAb,CAAkBH,OAAlB,CAAL,EAAiC;AAC7BE,UAAAA,WAAW,GAAG,KAAd;AACAD,UAAAA,UAAU,CAAC,YAAD,CAAV,GAA2B,kBAA3B;AACH;AACJ;;AAED,YAAKX,QAAL,CAAc;AAAEW,QAAAA,UAAU,EAAEA;AAAd,OAAd;;AACA,aAAOC,WAAP;AACA,KA1EkB;;AAElB,UAAKP,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,KAAK,EAAE,EAHI;AAIXC,MAAAA,KAAK,EAAE,EAJI;AAKXO,MAAAA,OAAO,EAAE,EALE;AAMXL,MAAAA,UAAU,EAAE;AAND,KAAb;AAFkB;AAUlB;;;;6BAkEQ;AACL,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAO,QAAA,EAAE,EAAC,WAAV;AAAsB,QAAA,IAAI,EAAC,WAA3B;AAAuC,QAAA,IAAI,EAAC,MAA5C;AAAmD,QAAA,KAAK,EAAG,KAAKN,KAAL,CAAWC,SAAtE;AAAkF,QAAA,QAAQ,EAAG,KAAKR,WAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHJ,EAII;AAAO,QAAA,EAAE,EAAC,UAAV;AAAqB,QAAA,IAAI,EAAC,UAA1B;AAAqC,QAAA,IAAI,EAAC,MAA1C;AAAiD,QAAA,KAAK,EAAG,KAAKO,KAAL,CAAWE,QAApE;AAA+E,QAAA,QAAQ,EAAG,KAAKT,WAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALJ,EAMI;AAAO,QAAA,EAAE,EAAC,OAAV;AAAkB,QAAA,IAAI,EAAC,OAAvB;AAA+B,QAAA,IAAI,EAAC,MAApC;AAA2C,QAAA,KAAK,EAAG,KAAKO,KAAL,CAAWG,KAA9D;AAAsE,QAAA,QAAQ,EAAG,KAAKV,WAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,EAOF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAPE,EAQI;AAAO,QAAA,EAAE,EAAC,OAAV;AAAkB,QAAA,IAAI,EAAC,OAAvB;AAA+B,QAAA,IAAI,EAAC,MAApC;AAA2C,QAAA,KAAK,EAAG,KAAKO,KAAL,CAAWI,KAA9D;AAAsE,QAAA,QAAQ,EAAG,KAAKX,WAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATJ,EAUI;AAAO,QAAA,EAAE,EAAC,SAAV;AAAoB,QAAA,IAAI,EAAC,SAAzB;AAAmC,QAAA,IAAI,EAAC,MAAxC;AAA+C,QAAA,KAAK,EAAG,KAAKO,KAAL,CAAWW,OAAlE;AAA4E,QAAA,QAAQ,EAAG,KAAKlB,WAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVJ,EAWI;AAAO,QAAA,EAAE,EAAC,QAAV;AAAmB,QAAA,IAAI,EAAC,QAAxB;AAAiC,QAAA,KAAK,EAAC,UAAvC;AAAkD,QAAA,QAAQ,EAAG,KAAKM,aAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXJ,CADD,CADD;AAkBH;;;;EAhGyBT,S;;AAmG3B,eAAeC,YAAf","sourcesContent":["// Name (cannot be empty) X\n// Phone Number (at least 7 digits, only numbers)\n// Email Address (cannot be empty and must be in format abc@xyz.someTld)\n// Zip Code (at least 5 digits, only numbers)\n\nimport React, { Component } from 'react';\n\nclass CustomerForm extends Component {\n\tconstructor(props) {\n\tsuper(props);\n\t this.state = {\n\t   firstName: '',\n\t   lastName: '',\n\t   phone: '',\n\t   email: '',\n\t   zipCode: '',\n\t   formErrors: {}\n\t }\t\n\t}\n\n\tupdateState = (event) => {\n\t this.setState({\n\t   [event.target.name]: event.target.value\n\t })\n\t}\n\n\n\tformValidator = () => {    \n\t const { firstName, lastName, phone, email, zipcode } = this.state\n\t let formErrors = {}\n\t let formIsValid = true  \n\n\t //frist name     \n\t if (!firstName) {    \n\t     formIsValid = false  \n\t     formErrors['firstNameErr'] = 'First Name is required.'\n\t }    \n\n\t\t//last name     \n\t if (!lastName) {    \n\t     formIsValid = false\n\t     formErrors['lastNameErr'] = 'Last Name is required.'  \n\t }    \n\n\t //email    \n\t if (!email) {    \n\t     formIsValid = false;    \n\t     formErrors['emailErr'] = 'Email is required.'    \n\t }    \n\t else if (!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email))) {    \n\t     formIsValid = false\n\t     formErrors['emailErr'] = 'Invalid email.'  \n\t }    \n\n\t //phone number    \n\t if (!phone) {    \n\t     formIsValid = false   \n\t     formErrors['phoneErr'] = 'Phone number is required.' \n\t }    \n\t else {    \n\t     var phoneRegex = /^(?:(?:\\\\+|0{0,2})91(\\s*[\\\\-]\\s*)?|[0]?)?[789]\\d{9}$/\n\t     if (!phoneRegex.test(phone)) {    \n\t         formIsValid = false\n\t         formErrors['phoneNumberErr'] = 'Invalid phone number.'    \n\t     }    \n\t }\n\n\t //zipcode    \n\t if (!zipcode) {    \n\t     formIsValid = false;    \n\t     formErrors['zipcodeErr'] = 'Phone number is required.' \n\t }    \n\t else {    \n\t     var zipcodeRegex = /(^(?!0{5})(\\d{5})(?!-?0{4})(-?\\d{4})?$)/  \n\t     if (!zipcodeRegex.test(zipcode)) {    \n\t         formIsValid = false\n\t         formErrors['zipcodeErr'] = 'Invalid zipcode.'  \n\t     }    \n\t }\n\n\t this.setState({ formErrors: formErrors })  \n\t return formIsValid \n\t}   \n\n\trender() {\n\t    return (\n\t    \t<div>\n\t\t    \t<form>\n\t\t\t        <label>First Name</label>\n\t\t\t        <input id='firstName' name='firstName' type='text' value={ this.state.firstName } onChange={ this.updateState }/>\n\t\t\t        <label>Last Name</label>\n\t\t\t        <input id='lastName' name='lastName' type='text' value={ this.state.lastName } onChange={ this.updateState }/>\n\t\t\t        <label>Phone</label>\n\t\t\t        <input id='phone' name='phone' type='text' value={ this.state.phone } onChange={ this.updateState }/>\n\t\t\t\t\t<label>Email</label>\n\t\t\t        <input id='email' name='email' type='text' value={ this.state.email } onChange={ this.updateState }/>\n\t\t\t        <label>ZipCode</label>\n\t\t\t        <input id='zipCode' name='zipCode' type='text' value={ this.state.zipCode } onChange={ this.updateState }/>\n\t\t\t        <input id='submit' type='submit' value='Continue' onSubmit={ this.formValidator}/>\n\t\t    \t</form>\n\t\t        {/* errors go here */}\n\t      </div>\n\t    )\n\t}\n}\n\nexport default CustomerForm"]},"metadata":{},"sourceType":"module"}